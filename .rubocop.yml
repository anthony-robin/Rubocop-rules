Rails:
  Enabled: true

AllCops:
  DisabledByDefault: true # Disable all cops by default
  Exclude:
    - 'db/**/*'
    - 'vendor/**/*'
    - 'node_modules/**/*'

# Align `when` with `case`.
Layout/CaseIndentation:
  Enabled: true

# Align comments with method definitions.
Layout/CommentIndentation:
  Enabled: true

# No extra empty lines.
Layout/EmptyLines:
  Enabled: true

# Add empty lines below private, protected, ...
Layout/EmptyLinesAroundAccessModifier:
  Enabled: true

# In a regular class definition, no empty lines around the body.
Layout/EmptyLinesAroundClassBody:
  Enabled: true

# In a regular module definition, no empty lines around the body.
Layout/EmptyLinesAroundModuleBody:
  Enabled: true

# Detect double spaces
Layout/ExtraSpacing:
  Enabled: true

# Two spaces, no tabs (for indentation).
Layout/IndentationWidth:
  Enabled: true

# Check whether comments have a leading space after the # denoting the start of the comment
Layout/LeadingCommentSpace:
  Enabled: true

# Checks the indentation of the method name part in method calls that span more than one line
Layout/MultilineMethodCallIndentation:
  Enabled: true
  EnforcedStyle: aligned

# Checks for colon (:) not followed by some kind of space.
Layout/SpaceAfterColon:
  Enabled: true

# Checks for comma (,) not followed by some kind of space.
Layout/SpaceAfterComma:
  Enabled: true

# Checks that the equals signs in parameter default assignments have or don't have surrounding space depending on configuration.
Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: true

# Checks the spacing around the keywords.
Layout/SpaceAroundKeyword:
  Enabled: true

# Checks that operators have space around them, except for ** which should not have surrounding space.
Layout/SpaceAroundOperators:
  Enabled: true

# Use `foo {}` not `foo{}`.
Layout/SpaceBeforeBlockBraces:
  Enabled: true

# Use `foo { bar }` not `foo {bar}`.
Layout/SpaceInsideBlockBraces:
  Enabled: true

# Use `{ a: 1 }` not `{a:1}`.
Layout/SpaceInsideHashLiteralBraces:
  Enabled: true

# Checks for spaces inside ordinary round parentheses.
Layout/SpaceInsideParens:
  Enabled: true

# Checks for whitespace within string interpolations.
Layout/SpaceInsideStringInterpolation:
  Enabled: true
  EnforcedStyle: no_space

# Detect hard tabs, no hard tabs.
Layout/Tab:
  Enabled: true

# Blank lines should not have any spaces.
Layout/TrailingBlankLines:
  Enabled: true

# No trailing whitespace.
Layout/TrailingWhitespace:
  Enabled: true

# Align `end` with the matching keyword or starting expression except for
# assignments, where it should be aligned with the LHS.
Lint/EndAlignment:
  Enabled: true
  EnforcedStyleAlignWith: variable

# Use my_method(my_arg) not my_method( my_arg ) or my_method my_arg.
Lint/RequireParentheses:
  Enabled: true

# Checks for unused method arguments
Lint/UnusedMethodArgument:
  Enabled: true

# This cop identifies places where `gsub` can be replaced by `tr` or `delete`.
Performance/StringReplacement:
  Enabled: true

# Prefer &&/|| over and/or.
Style/AndOr:
  Enabled: true

# Do not use braces for hash literals when they are the last argument of a
# method call.
Style/BracesAroundHashParameters:
  Enabled: true

# Checks the style of children definitions at classes and modules
Style/ClassAndModuleChildren:
  Enabled: true
  EnforcedStyle: nested

# Check for if and case statements where each branch is used for assignment to the same variable when using the return of the condition can be used instead
Style/ConditionalAssignment:
  Enabled: true

# Use Ruby >= 1.9 syntax for hashes. Prefer { a: :b } over { :a => :b }.
Style/HashSyntax:
  Enabled: true

# If the `else` branch of a conditional consists solely of an `if` node, it can be combined with the `else` to become an `elsif`
Style/IfInsideElse:
  Enabled: true

# Defining a method with parameters needs parentheses.
Style/MethodDefParentheses:
  Enabled: true

# Checks whether some constant value isn't a mutable literal (e.g. array or hash)
Style/MutableConstant:
  Enabled: true

# Enforces the consistent usage of `%`-literal delimiters.
Style/PercentLiteralDelimiters:
  Enabled: true
  PreferredDelimiters:
    default:  '()'
    '%i': '[]'
    '%w': '[]'
    '%W': '[]'
    '%r': '{}'

# This cop makes sure that predicates are named properly
Style/PredicateName:
  Enabled: true

# Do not use return for last method line
Style/RedundantReturn:
  Enabled: true

# Checks for redundant uses of self
Style/RedundantSelf:
  Enabled: true

# Checks for uses of `fail` and `raise`
Style/SignalException:
  Enabled: true

# Check quotes usage according to lint rule below.
Style/StringLiterals:
  Enabled: true
  EnforcedStyle: single_quotes

# Check for array literals made up of symbols that are not using the %i() syntax
Style/SymbolArray:
  Enabled: true

# Checks for trailing comma in array and hash literals
Style/TrailingCommaInLiteral:
  Enabled: true
  EnforcedStyleForMultiline: no_comma

# This cop looks for unless expressions with else clauses
Style/UnlessElse:
  Enabled: true

# Checks for strings that are just an interpolated expression.
Style/UnneededInterpolation:
  Enabled: true

# Use quotes for string literals when they are enough.
Style/UnneededPercentQ:
  Enabled: true

# Check for array literals made up of word-like strings, that are not using the %w() syntax
Style/WordArray:
  Enabled: true
